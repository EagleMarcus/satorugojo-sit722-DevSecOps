# 
# GitHub Actions workflow.
#
# Automatically deploys the Node.js microservice to Kubernetes on push to any branch. 
# For real use you might want to restrict this to the "prod" branch.
#

name: Delete Microservices

on:
  #
  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  #
  workflow_dispatch: 

jobs:

  delete:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pages: write
    
    env:      
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}  # Use region from secrets
      VERSION: ${{ github.sha }}
      APP_NAME: ${{ secrets.APP_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      # Login to AWS ECR
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

        
      #- uses: tale/kubectl-action@v1
      #  with:
      #    base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      #    kubectl-version: v1.30.3

      #- name: Set AKS context
      #  id: set-context
      #  uses: azure/aks-set-context@v3
      #  with:
      #    resource-group: '${{ secrets.AZURE_RESOURCE_GROUP_NAME }}' 
      #    cluster-name: '${{ secrets.AZURE_APP_NAME }}' 
      
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3 
      
      #
      # Deletes the configuration template and deploys the microservice.
      #
      - name: Delete
        env:
          CONTAINER_REGISTRY: ${{ steps.CONTAINER_REGISTRY.outputs.h }}
        run: | 
               chmod +x ./scripts/delete.sh
               ./scripts/delete.sh

      - name: 'Getting Deployments'
        run: 'kubectl get deployments'
